Title, Author, Description, URL
20 Python Libraries You Aren't Using (But Should), Caleb Hattingh, 'The Python ecosystem is vast and far-reaching in both scope and depth. Starting out in this crazy, open-source forest is daunting, and even with years of experience, it still requires continual effort to keep up-to-date with the best libraries and techniques. This report helps you explore some of the lesser known Python libraries and tools, including third-party modules and several extremely useful tools in the standard library that deserve more attention.\n What makes this collection different from other lists online? Author Caleb Hattingh diligently spent time finding and testing hidden gems that fit several criteria: easy to install and use, cross-platform, applicable to more than one domain, and not yet popular but likely to become so soon. You will likely discover at least a couple of cool libraries that will assist you in your everyday Python activities, no matter your specialization.",https://www.oreilly.com/library/view/20-python-libraries/9781492037866/
A Beginner's Python Tutorial, Steven Thurlow, 'Python is an interpreted programming language. For those who don't know, a programming language is what you write down to tell a computer what to do. However, the computer doesn't read the language directly—there are hundreds of programming languages, and it couldn't understand them all. So, when someone writes a program, they will write it in their language of choice, and then compile it—that is, turn it into lots of 0s and 1s, that the computer can easily and quickly understand. A Windows program that you buy is already compiled for Windows—if you opened the program file up, you'd just get a mass of weird characters and rectangles. Give it a go—find a small Windows program, and open it up in Notepad or Wordpad. See what garbled mess you get.\n But that Windows program is compiled for Windows—no other machine can run that program, unless it has Windows. What Python is, is a language which is never actually compiled in full—instead, an interpreter turns each line of code into 0s and 1s that your computer can understand. And it is done on the fly—it compiles the bits of the program you are using as you are using them. If you were to quit the program and come back another day, it would compile the bits you are using, as you are using them, again. Seems a waste of time? Maybe, but the fact is that when you come back another day, you might be using a Windows PC instead of a Mac. You might send the program to a friend, who uses another type of computer. Or you might post your program on the internet, where everyone using all different types of systems might download it. That is the wonder of an interpreted programming language—it is like a language that everyone can understand.', https://en.wikibooks.org/wiki/A_Beginner%27s_Python_Tutorial/Installing_Python
A Byte of Python, Swaroop C H, '"A Byte of Python" is a free book on programming using the Python language. It serves as a tutorial or guide to the Python language for a beginner audience. If all you know about computers is how to save text files, then this is the book for you.', https://python.swaroopch.com/
A Guide to Python's Magic Methods, Rafe Kettler, 'This guide is the culmination of a few months' worth of blog posts. The subject is \textbf{magic methods}.\n What are magic methods? They're everything in object-oriented Python. They're special methods that you can define to add "magic" to your classes. They're always surrounded by double underscores (e.g. \code{__init__} or \code{__lt__}). They're also not as well documented as they need to be. All of the magic methods for Python appear in the same section in the Python docs, but they're scattered about and only loosely organized. There's hardly an example to be found in that section (and that may very well be by design, since they're all detailed in the \emph{language reference}, along with boring syntax descriptions, etc.).\n So, to fix what I perceived as a flaw in Python's documentation, I set out to provide some more plain-English, example-driven documentation for Python's magic methods. I started out with weekly blog posts, and now that I've finished with those, I've put together this guide.\n I hope you enjoy it. Use it as a tutorial, a refresher, or a reference; it's just intended to be a user-friendly guide to Python's magic methods.', https://github.com/RafeKettler/magicmethods/blob/master/magicmethods.tex
A Whirlwind Tour of Python, Jake VanderPlas, 'Conceived  in  the  late  1980s  as  a  teaching  and  scripting  language,Python  has  since  become  an  essential  tool  for  many  programmers,engineers,   researchers,   and   data   scientists   across   academia   and  industry. As an astronomer focused on building and promoting the free open tools for data-intensive science, I’ve found Python to be a near-perfect  fit  for  the  types  of  problems  I  face  day  to  day,  whether it’s  extracting  meaning  from  large  astronomical  datasets,  scraping and munging data sources from the Web, or automating day-to-day research tasks.', https://www.oreilly.com/programming/free/files/a-whirlwind-tour-of-python.pdf
Automate the Boring Stuff with Python, Al Sweigart, 'If you've ever spent hours renaming files or updating hundreds of spreadsheet cells, you know how tedious tasks like these can be. But what if you could have your computer do them for you?\n In Automate the Boring Stuff with Python, you'll learn how to use Python to write programs that do in minutes what would take you hours to do by hand-no prior programming experience required. Once you've mastered the basics of programming, you'll create Python programs that effortlessly perform useful and impressive feats of automation', https://automatetheboringstuff.com/